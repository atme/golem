{"version":3,"sources":["index.js"],"names":["create","canvas","vertex","fragment","gl","getContext","Error","vertexShader","createShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","useProgram","type","source","shader","success","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","err","getShaderInfoLog","deleteShader","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","name","data","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","attr","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","texture","image","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","drawTriangles","count","drawArrays","TRIANGLES"],"mappings":";AA0Fe,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAxFf,IAAMA,EAAS,SACbC,EACAC,EACAC,GAEMC,IAAAA,EAAKH,EAAOI,WAAW,SACzB,IAACD,EACG,MAAA,IAAIE,MAAM,qCAGZC,IAAAA,EAAeC,EAAaJ,EAAIA,EAAGK,cAAeP,GACpD,GAAwB,iBAAjBK,EACH,MAAA,IAAID,MAAMC,GAGZG,IAAAA,EAAiBF,EAAaJ,EAAIA,EAAGO,gBAAiBR,GACxD,GAA0B,iBAAnBO,EACH,MAAA,IAAIJ,MAAMI,GAGZE,IAAAA,EAAUC,EAAcT,EAAIG,EAAcG,GAC5C,GAAmB,iBAAZE,EACH,MAAA,IAAIN,MAAMM,GAIX,OADPR,EAAGU,WAAWF,GACP,CAACR,EAAIQ,IAGRJ,EAAe,SAACJ,EAAIW,EAAMC,GACxBC,IAAAA,EAASb,EAAGI,aAAaO,GAI3BG,GAHJd,EAAGe,aAAaF,EAAQD,GACxBZ,EAAGgB,cAAcH,GACQb,EAAGiB,mBAAmBJ,EAAQb,EAAGkB,gBAEjDL,OAAAA,EAGHM,IAAAA,EAAMnB,EAAGoB,iBAAiBP,GAEzBM,OADPnB,EAAGqB,aAAaR,GACTM,GAGHV,EAAgB,SAACT,EAAIF,EAAQC,GAC3BS,IAAAA,EAAUR,EAAGS,gBAKfK,GAJJd,EAAGsB,aAAad,EAASV,GACzBE,EAAGsB,aAAad,EAAST,GACzBC,EAAGuB,YAAYf,GACUR,EAAGwB,oBAAoBhB,EAASR,EAAGyB,aAEnDjB,OAAAA,EAGHW,IAAAA,EAAMnB,EAAG0B,kBAAkBlB,GAE1BW,OADPnB,EAAG2B,cAAcnB,GACVW,GAGHrB,EAAS,SACbE,EACAQ,EACAoB,EACAC,GAEMC,IAAAA,EAAS9B,EAAG+B,eAClB/B,EAAGgC,WAAWhC,EAAGiC,aAAcH,GAC/B9B,EAAGkC,WAAWlC,EAAGiC,aAAc,IAAIE,aAAaN,GAAO7B,EAAGoC,aACpDC,IAAAA,EAAOrC,EAAGsC,kBAAkB9B,EAASoB,GAC3C5B,EAAGuC,oBAAoBF,EAAM,EAAGrC,EAAGwC,OAAO,EAAO,EAAG,GACpDxC,EAAGyC,wBAAwBJ,IAGvBK,EAAU,SAAC1C,EAA2B2C,GACpCD,IAAAA,EAAU1C,EAAG4C,gBACnB5C,EAAG6C,YAAY7C,EAAG8C,WAAYJ,GAE9B1C,EAAG+C,cAAc/C,EAAG8C,WAAY9C,EAAGgD,eAAgBhD,EAAGiD,eACtDjD,EAAG+C,cAAc/C,EAAG8C,WAAY9C,EAAGkD,eAAgBlD,EAAGiD,eACtDjD,EAAG+C,cAAc/C,EAAG8C,WAAY9C,EAAGmD,mBAAoBnD,EAAGoD,SAC1DpD,EAAG+C,cAAc/C,EAAG8C,WAAY9C,EAAGqD,mBAAoBrD,EAAGoD,SAE1DpD,EAAGsD,WAAWtD,EAAG8C,WAAY,EAAG9C,EAAGuD,KAAMvD,EAAGuD,KAAMvD,EAAGwD,cAAeb,IAGhEc,EAAgB,SAACzD,EAA2B0D,GAChD1D,EAAG2D,WAAW3D,EAAG4D,UAAW,EAAG,EAAIF,IAGtB,EAAA,CAAE9D,OAAAA,EAAQE,OAAAA,EAAQ4C,QAAAA,EAASe,cAAAA,GAA3B,QAAA,QAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["// @flow\n\nconst create = (\n  canvas: HTMLCanvasElement,\n  vertex: string,\n  fragment: string\n): [WebGLRenderingContext, WebGLProgram] => {\n  const gl = canvas.getContext('webgl')\n  if (!gl) {\n    throw new Error('WebGL doesn\\'t work in the browser')\n  }\n\n  const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertex)\n  if (typeof vertexShader === 'string') {\n    throw new Error(vertexShader)\n  }\n\n  const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragment)\n  if (typeof fragmentShader === 'string') {\n    throw new Error(fragmentShader)\n  }\n\n  const program = createProgram(gl, vertexShader, fragmentShader)\n  if (typeof program === 'string') {\n    throw new Error(program)\n  }\n\n  gl.useProgram(program)\n  return [gl, program]\n}\n\nconst createShader = (gl, type, source): WebGLShader | string => {\n  const shader = gl.createShader(type)\n  gl.shaderSource(shader, source)\n  gl.compileShader(shader)\n  const success: boolean = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (success) {\n    return shader\n  }\n\n  const err = gl.getShaderInfoLog(shader)\n  gl.deleteShader(shader)\n  return err\n}\n\nconst createProgram = (gl, vertex, fragment): WebGLProgram | string => {\n  const program = gl.createProgram()\n  gl.attachShader(program, vertex)\n  gl.attachShader(program, fragment)\n  gl.linkProgram(program)\n  const success: boolean = gl.getProgramParameter(program, gl.LINK_STATUS)\n  if (success) {\n    return program\n  }\n\n  const err = gl.getProgramInfoLog(program)\n  gl.deleteProgram(program)\n  return err\n}\n\nconst vertex = (\n  gl: WebGLRenderingContext,\n  program: WebGLProgram,\n  name: string,\n  data: Array<number>\n) => {\n  const buffer = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)\n  const attr = gl.getAttribLocation(program, name)\n  gl.vertexAttribPointer(attr, 2, gl.FLOAT, false, 0, 0)\n  gl.enableVertexAttribArray(attr)\n}\n\nconst texture = (gl: WebGLRenderingContext, image: HTMLImageElement) => {\n  const texture = gl.createTexture()\n  gl.bindTexture(gl.TEXTURE_2D, texture)\n\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST)\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST)\n\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image)\n}\n\nconst drawTriangles = (gl: WebGLRenderingContext, count: number) => {\n  gl.drawArrays(gl.TRIANGLES, 0, 3 * count)\n}\n\nexport default { create, vertex, texture, drawTriangles }\n"]}